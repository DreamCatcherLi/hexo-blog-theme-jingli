<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java8 - 更优雅的字符串连接(join)收集器 Collectors.joining]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%2FJava8%20-%20%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5(join)%E6%94%B6%E9%9B%86%E5%99%A8%20Collectors.joining%2F</url>
    <content type="text"><![CDATA[Java8中的字符串连接收集器 在JDK8中，可以采用函数式编程（使用 Collectors.joining 收集器）的方式对字符串进行更优雅的连接。Collectors.joining 收集器 支持灵活的参数配置，可以指定字符串连接时的 分隔符，前缀 和 后缀 字符串。代码参考如下： 1234567891011121314// 定义人名数组final String[] names = &#123;"Zebe", "Hebe", "Mary", "July", "David"&#125;;Stream&lt;String&gt; stream1 = Stream.of(names);Stream&lt;String&gt; stream2 = Stream.of(names);Stream&lt;String&gt; stream3 = Stream.of(names);// 拼接成 [x, y, z] 形式String result1 = stream1.collect(Collectors.joining(", ", "[", "]"));// 拼接成 x | y | z 形式String result2 = stream2.collect(Collectors.joining(" | ", "", ""));// 拼接成 x -&gt; y -&gt; z] 形式String result3 = stream3.collect(Collectors.joining(" -&gt; ", "", ""));System.out.println(result1);System.out.println(result2);System.out.println(result3); 程序输出结果如下：1234567891011121314151617[Zebe, Hebe, Mary, July, David]Zebe | Hebe | Mary | July | DavidZebe -&gt; Hebe -&gt; Mary -&gt; July -&gt; David``` ## 一般的做法（不推荐） 在JAVA8出现之前，我们通常使用循环的方式来拼接字符串，这样做不仅代码冗长丑陋，而且需要仔细阅读代码才知道代码的功能例如下面的代码：```javafinal String[] names = &#123;"Zebe", "Hebe", "Mary", "July", "David"&#125;;StringBuilder builder = new StringBuilder();for (int i = 0; i &lt; names.length; i++) &#123; if (builder.length() &gt; 1) &#123; builder.append(","); &#125; builder.append(names[i]);&#125;System.out.println(builder.toString());]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how are u]]></title>
    <url>%2Funcategorized%2Fhow-are-u%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇文章]]></title>
    <url>%2Funcategorized%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[居中样式]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Funcategorized%2F%E9%9A%8F%E4%BE%BF%E8%AF%95%E8%AF%95%2F</url>
    <content type="text"><![CDATA[第一篇博客 这是引用地方 http://baidu.com 第一点 第二点 第三点 这是有序列表1 这是有序列表2 这是有序列表3 2019/3/20 17:39:13]]></content>
  </entry>
  <entry>
    <title><![CDATA[随便写点东西]]></title>
    <url>%2Funcategorized%2F%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9%E4%B8%9C%E8%A5%BF%2F</url>
    <content type="text"><![CDATA[第一篇博客 这是引用地方 http://baidu.com 第一点 第二点 第三点 这是有序列表1 这是有序列表2 这是有序列表3 2019/3/20 17:39:13]]></content>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NewBlog]]></title>
    <url>%2Funcategorized%2FNewBlog%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Funcategorized%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
